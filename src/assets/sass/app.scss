// @import "./bootstrap/my-theme.scss";



// app global css in SCSS form
@import './bootstrap/colors';

@import "./bootstrap/functions";
@import "./bootstrap/variables";
@import "./bootstrap/maps"; // **Newly added!**
@import "./bootstrap/utilities";
@import "./bootstrap/mixins";

@mixin alert-variant($background, $border, $color) {
  --#{$prefix}alert-color: #{$color};
  --#{$prefix}alert-bg: #{$background};
  --#{$prefix}alert-border-color: #{$border};

  @if $enable-gradients {
    background-image: var(--#{$prefix}gradient);
  }

  .alert-link {
    color: shade-color($color, 20%);
  }
}
// $enable-grid-classes: false;
// $enable-cssgrid: true;

$theme-colors: map-merge($theme-colors, $custom-colors);
$theme-colors-rgb: map-loop($theme-colors, to-rgb, "$value");

$utilities-colors: map-merge($utilities-colors, $theme-colors-rgb);
$utilities-colors: map-loop($utilities-colors, rgba-css-var, '$key', 'alert');

$custom-border-subtle:();
$custom-bg-subtle:();
// $custom-alert:();

@each $color, $value in $theme-colors {
  $custom-border-subtle: map-merge($custom-border-subtle, ("#{$color}-subtle":rgba(var(--#{$prefix}#{$color}-rgb), 5)));
}

@each $color, $value in $theme-colors {
  $custom-bg-subtle: map-merge($custom-bg-subtle, ("#{$color}-subtle":rgba(var(--#{$prefix}#{$color}-rgb), .2)));
}

$utilities: map-merge(
  $utilities,
  (
    "color": (
      property: color,
      class: text,
      local-vars: (
        "text-opacity": 1
      ),
      values: map-merge(
        $theme-colors,
        (
          "muted": $text-muted, // deprecated
          "black-50": rgba($black, .5), // deprecated
          "white-50": rgba($white, .5), // deprecated
          "body-secondary": var(--#{$prefix}secondary-color),
          "body-tertiary": var(--#{$prefix}tertiary-color),
          "body-emphasis": var(--#{$prefix}emphasis-color),
          "reset": inherit,
        )
      )
    ),
    "border-color": (
      property: border-color,
      class: border,
      local-vars: (
        "border-opacity": 1
      ),
      values: $theme-colors
    ),
    "subtle-border-color": (
      property: border-color,
      class: border,
      values: map-merge( $utilities-border-subtle, $custom-border-subtle)
    ),
    "subtle-background-color": (
      property: background-color,
      class: bg,
      values: map-merge( $utilities-bg-subtle, $custom-bg-subtle)
    ),
    "background-color": (
      property: background-color,
      class: bg,
      local-vars: (
        "bg-opacity": 1
      ),
      values: map-merge(
        $theme-colors,
        (
          "transparent": transparent,
          "body-secondary": rgba(var(--#{$prefix}secondary-bg-rgb), var(--#{$prefix}bg-opacity)),
          "body-tertiary": rgba(var(--#{$prefix}tertiary-bg-rgb), var(--#{$prefix}bg-opacity)),
          "body-emphasis": rgba(var(--#{$prefix}emphasis-bg-rgb), var(--#{$prefix}bg-opacity)),
        )
      )
    ),
  )
);

@import "./bootstrap/bootstrap";

@each $state, $value in $theme-colors {
  $alert-background: shift-color($value, $alert-bg-scale);
  $alert-border: shift-color($value, $alert-border-scale);
  $alert-color: shift-color($value, $alert-color-scale);

  @if (contrast-ratio($alert-background, $alert-color) < $min-contrast-ratio) {
    $alert-color: mix($value, color-contrast($alert-background), abs($alert-color-scale));
  }
  .alert-#{$state} {
    @include alert-variant($alert-background, $alert-border, $alert-color);
  }
}